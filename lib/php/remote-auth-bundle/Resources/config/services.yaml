parameters:
  alchemy_remote_auth.auth_base_url: '%env(AUTH_API_BASE_URL)%'
  alchemy_remote_auth.admin_client_id: '%env(ADMIN_CLIENT_ID)%_%env(ADMIN_CLIENT_RANDOM_ID)%'
  alchemy_remote_auth.admin_client_secret: '%env(ADMIN_CLIENT_SECRET)%'
  env(VERIFY_SSL): true

services:
  _defaults:
    autowire: true
    autoconfigure: true
    public: false

  alchemy.remote_client:
    class: GuzzleHttp\Client
    arguments:
    -
      base_uri: "%alchemy_remote_auth.auth_base_url%"
      verify: '%env(bool:VERIFY_SSL)%'
      options:
        timeout: 10
        http_errors: false
        headers:
          Accept: "application/json"


  Alchemy\RemoteAuthBundle\Client\AuthServiceClient:
    arguments:
      $client: "@alchemy.remote_client"

  Alchemy\RemoteAuthBundle\Security\LoginFormAuthenticator:
    abstract: true
    arguments:
      $clientId: '%alchemy_remote_auth.admin_client_id%'
      $clientSecret: '%alchemy_remote_auth.admin_client_secret%'

  Alchemy\RemoteAuthBundle\Security\Firewall\RemoteAuthListener: ~

  Alchemy\RemoteAuthBundle\Security\Provider\RemoteAuthProvider: ~
  Alchemy\RemoteAuthBundle\Security\RemoteUserProvider: ~
  Alchemy\RemoteAuthBundle\Security\RemoteAuthAuthenticator: ~
  Alchemy\RemoteAuthBundle\Security\RemoteAccessAuthenticator: ~
  Alchemy\RemoteAuthBundle\Client\AdminClient: ~
  Alchemy\RemoteAuthBundle\Http\AuthStateEncoder: ~
  Alchemy\RemoteAuthBundle\Repository\AbstractRemoteAuthRepository: ~
  Alchemy\RemoteAuthBundle\Repository\RemoteAuthUserRepository: ~
  Alchemy\RemoteAuthBundle\Repository\RemoteAuthGroupRepository: ~
  Alchemy\RemoteAuthBundle\Repository\UserRepositoryInterface: "@Alchemy\\RemoteAuthBundle\\Repository\\RemoteAuthUserRepository"
  Alchemy\RemoteAuthBundle\Repository\GroupRepositoryInterface: "@Alchemy\\RemoteAuthBundle\\Repository\\RemoteAuthGroupRepository"
