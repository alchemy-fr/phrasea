# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    env(S3_STORAGE_ENDPOINT): ~
    env(S3_STORAGE_USE_PATH_STYLE_ENDPOINT): false

    router.request_context.host: '%env(EXPOSE_API_BASE_URL)%'
    router.request_context.scheme: 'https'
    asset.request_context.secure: true

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $storageBaseUrl: '%env(S3_STORAGE_BASE_URL)%'
            $zippyBaseUrl: '%env(ZIPPY_BASE_URL)%'
    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    _instanceof:
        Arthem\Bundle\RabbitBundle\Consumer\Event\EventMessageHandlerInterface:
            tags: ['arthem_rabbit.event_handler']
        App\Serializer\Normalizer\EntityNormalizerInterface:
            tags: ['app.entity_normalizer']
        Doctrine\Common\EventSubscriber:
            tags: ['doctrine.event_subscriber']

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Storage\FileStorageManager:
        arguments:
            $filesystem: "@oneup_flysystem.asset_filesystem"

    Arthem\RequestSignerBundle\RequestSigner: "@arthem_request_signer.request_signer"

    app.s3_client.internal:
        class: Aws\S3\S3Client
        arguments:
        -
            version: 'latest'
            region: '%env(default::S3_STORAGE_REGION)%'
            use_path_style_endpoint: '%env(bool:S3_STORAGE_USE_PATH_STYLE_ENDPOINT)%'
            endpoint: '%env(default::S3_STORAGE_ENDPOINT)%'
            credentials:
                key: '%env(S3_STORAGE_ACCESS_KEY)%'
                secret: '%env(S3_STORAGE_SECRET_KEY)%'

    app.s3_client.external:
        class: Aws\S3\S3Client
        arguments:
            -
                version: 'latest'
                region: '%env(default::S3_STORAGE_REGION)%'
                use_path_style_endpoint: '%env(bool:S3_STORAGE_USE_PATH_STYLE_ENDPOINT)%'
                bucket: '%env(default::S3_STORAGE_BUCKET_NAME)%'
                endpoint: '%env(default::S3_STORAGE_BASE_URL)%'
                credentials:
                    key: '%env(S3_STORAGE_ACCESS_KEY)%'
                    secret: '%env(S3_STORAGE_SECRET_KEY)%'

    App\Upload\UploadManager:
        arguments:
            $client: '@app.s3_client.external'
            $uploadBucket: '%env(S3_STORAGE_BUCKET_NAME)%'

    App\Serializer\NormalizerDecorator:
        abstract: true
        autoconfigure: false

    app.serializer.decorated_item:
        class: App\Serializer\NormalizerDecorator
        decorates: 'api_platform.serializer.normalizer.item'
        arguments: [ '@app.serializer.decorated_item.inner' ]
        tags:
            - { name: serializer.normalizer, priority: 255 }

    app.serializer.decorated_object:
        class: App\Serializer\NormalizerDecorator
        decorates: 'serializer.normalizer.object'
        arguments: [ '@app.serializer.decorated_object.inner' ]
        tags:
            - { name: serializer.normalizer, priority: -989 }

    App\DataPersister\PublicationDataPersister:
        decorates: 'api_platform.doctrine.orm.data_persister'

    App\Form\ThemeChoiceType:
        arguments:
            $choices:
                light: Light
                dark: Dark

    App\Form\LayoutChoiceType:
        arguments:
            $choices:
                gallery: Gallery
                grid: Grid gallery
                download: Download
                mapbox: Mapbox

    App\Form\MapLayoutChoiceType:
        arguments:
            $choices:
                light-v10: Light
                dark-v10: Dark
                outdoors-v11: Outdoors
                satellite-v9: Satellite

    app.zippy_client:
        class: GuzzleHttp\Client
        arguments:
            -
                base_uri: '%env(ZIPPY_BASE_URL)%'
                verify: '%app.verify_ssl%'
                headers:
                    Authorization: '%env(ZIPPY_CLIENT_ID)%:%env(ZIPPY_CLIENT_SECRET)%'
                options:
                    timeout: 10
                    http_errors: false
                    headers:
                        Accept: "application/json"

    App\ZippyManager:
        arguments:
            $client: '@app.zippy_client'

    App\Security\Authentication\JWTManager:
        arguments:
            $signingKey: '%env(APP_SECRET)%'
            $baseUri: '%env(EXPOSE_API_BASE_URL)%'
            $ttl: '%env(EXPOSE_REQUEST_SIGNATURE_TTL)%'
