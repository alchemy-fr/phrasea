# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    default_locale: 'en'
    env(VERIFY_SSL): true
    stof_doctrine_extensions.listener.softdeleteable.class: App\Doctrine\Listener\SoftDeleteableListener

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            string $defaultLocale: '%default_locale%'
            string $zippyBaseUrl: '%env(ZIPPY_URL)%'
            string $databoxBaseUrl: '%env(DATABOX_API_URL)%'
            string $databoxClientBaseUrl: '%env(DATABOX_CLIENT_URL)%'
            ApiPlatform\State\ProviderInterface $itemProvider: '@api_platform.doctrine.orm.state.item_provider'
            ApiPlatform\State\ProviderInterface $itemsProvider: '@api_platform.doctrine.orm.state.collection_provider'
            bool $useAlias: '%elastica.use_alias%'

    _instanceof:
        Alchemy\Workflow\Executor\Action\ActionInterface:
            tags: ['alchemy_workflow.action']
        Arthem\Bundle\RabbitBundle\Consumer\Event\EventMessageHandlerInterface:
            tags: ['arthem_rabbit.event_handler']
        Symfony\Component\EventDispatcher\EventSubscriberInterface:
            tags: ['kernel.event_subscriber']
        App\Attribute\Type\AttributeTypeInterface:
            tags: ['app.attribute_type']
        App\Integration\IntegrationInterface:
            tags: ['app.integration']
        App\Integration\IntegrationDataTransformerInterface:
            tags: ['app.integration_data_transformer']
        App\Elasticsearch\Facet\FacetInterface:
            tags: ['app.search.facet']

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/Api/Model/'
            - '../src/Serializer/' # Should be explicitly declared

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    App\Elasticsearch\AssetSearch:
        arguments:
            - '@fos_elastica.finder.asset'

    App\Elasticsearch\CollectionSearch:
        arguments:
            - '@fos_elastica.finder.collection'

    App\Elasticsearch\AssetDataTemplateSearch:
        arguments:
            - '@fos_elastica.finder.asset_data_template'

    App\Elasticsearch\Listener\DeferredIndexListener:
        tags:
            - { name: kernel.event_listener, event: kernel.terminate, method: flush }
            - { name: kernel.event_listener, event: console.terminate, method: flush }
            - { name: kernel.event_listener, event: rabbit_handler.terminate, method: flush }

    App\Elasticsearch\ESSearchIndexer:
        tags:
            - { name: kernel.event_listener, event: kernel.terminate, method: flush, priority: -255 }
            - { name: kernel.event_listener, event: console.terminate, method: flush, priority: -255 }
            - { name: kernel.event_listener, event: rabbit_handler.terminate, method: flush, priority: -255 }

    App\Listener\TerminateStackListener:
        tags:
            - { name: kernel.event_listener, event: kernel.terminate, method: onTerminate }
            - { name: kernel.event_listener, event: console.terminate, method: onTerminate }
            - { name: kernel.event_listener, event: rabbit_handler.terminate, method: onTerminate }

    App\Api\Serializer\SecurityContextBuilder:
        decorates: 'api_platform.serializer.context_builder'
        arguments: [ '@App\Api\Serializer\SecurityContextBuilder.inner' ]
        autoconfigure: false

    App\Security\JWTTokenManager:
        arguments:
            $signingKey: '%env(APP_SECRET)%'
            $ttl: 86400

    App\Elasticsearch\Mapping\IndexMappingUpdater:
        arguments:
            $index: '@fos_elastica.index.asset'

    App\Elasticsearch\Mapping\ElasticsearchClient:
        arguments:
            $client: '@fos_elastica.client'

    App\Elasticsearch\Mapping\IndexSyncState:
        arguments:
            $configManager: '@fos_elastica.config_manager'
            $mappingBuilder: '@fos_elastica.mapping_builder'

    App\Elasticsearch\IndexCleaner:
        arguments:
            $client: '@fos_elastica.client'
            $collectionIndex: '@fos_elastica.index.collection'
            $assetIndex: '@fos_elastica.index.asset'

    fos_elastica.elastica_to_model_transformer.prototype.orm:
        class: App\Elasticsearch\Transformer\AppElasticaToModelTransformer
        abstract: true
        arguments:
            - '@doctrine'
            - ~ # model
            - ~ # options
        calls:
            - [setPropertyAccessor, ['@fos_elastica.property_accessor']]

    hydra_meta.normalizer:
        class:  App\Serializer\HydraMetaNormalizer
        public: true

    App\Repository\Cache\AttributeDefinitionRepositoryMemoryCachedDecorator:
        decorates: 'App\Repository\Core\AttributeDefinitionRepository'

    App\Api\Serializer\GroupNormalizerContextBuilder:
        decorates: 'alchemy_webhook.normalizer.context_builder'
        arguments: [ '@App\Api\Serializer\GroupNormalizerContextBuilder.inner' ]
        autoconfigure: false

    App\Elasticsearch\Facet\FacetRegistry:
        arguments:
            - !tagged_iterator { tag: 'app.search.facet', default_index_method: 'getKey' }

    App\Integration\IntegrationRegistry:
        arguments:
            - !tagged_iterator { tag: 'app.integration', default_index_method: 'getName' }

    App\Integration\IntegrationDataProcessor:
        arguments:
            - !tagged_iterator { tag: 'app.integration_data_transformer' }

    App\Integration\RemoveBg\RemoveBgClient:
        arguments:
            $cacheDir: '%kernel.cache_dir%/integrations/remove.bg'

    app.budget_limit.cache_storage:
        class: Symfony\Component\RateLimiter\Storage\CacheStorage
        arguments:
            $pool: '@budget_limit.cache'

    App\Integration\ApiBudgetLimiter:
        lazy: true
        arguments:
            $storage: '@app.budget_limit.cache_storage'

    App\Security\Secrets\SecretsManager:
        $publicKey: '%env(SECRETS_PUBLIC_KEY)%'
        $secretKey: '%env(SECRETS_SECRET_KEY)%'

    App\Workflow\IntegrationWorkflowRepository:
        decorates: 'alchemy.workflow.workflow_repository.default'
        arguments:
            $decorated: '@.inner'
