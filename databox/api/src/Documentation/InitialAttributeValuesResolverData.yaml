# This file is used to:
# - generate the documentation for the initial values of attributes
#       blocks with a "documentation" section will be included in the documentation
# - provide the data for the tests
#       blocks with `test: false` will not be included in the tests
#
# Syntax and shortcuts
#
# - definitions/<fieldname>/initialValues is an array with keys as locale code, like '_', 'fr', 'en', etc.
#   if no locale distingo is needed, the plain value can be used (it will be converted to ['_' => value])
# - same principle applies for expected/<fieldname> values (no locale == '_' locale)
#
# - expected values is an array, possibly with only one element
#   if only one value is expected, the plain value can be used (it will test with [value])
#
# - fieldType defaults to text
#
# - isMultiple defaults to false
#
# - possible fieldTypes are:
#   boolean, code, collection_path, color, date, date_time, entity, geo_point, html, ip, json, keyword, number, tag, textarea, text

exiftoolVersion:
    documentation:
        title: 'Check of integration "metadata-read"'
        description:
            'Extracting the `ExifTool:ExifToolVersion` metadata allows to ensure that the metadata-read.
            integration is functional.
            The metadata `ExifTool:ExifToolVersion` in always returned by exiftool.'
    definitions:
        exiftoolVersion:
            initialValues: '{ "type": "metadata", "value": "ExifTool:ExifToolVersion"}'
    metadata:
        'ExifTool:ExifToolVersion': '12.42'
    expected:
        exiftoolVersion: '12.42'

multi2mono:
    documentation:
        title: 'Multi-values metadata -> mono-value attribute ("metadata" method)'
        description:
            'Values will be separated by " ; "'
    definitions:
        Keywords:
            isMultiple: false
            initialValues: '{"type": "metadata", "value": "IPTC:Keywords"}'
    metadata:
        'IPTC:Keywords': ['dog', 'cat', 'bird']
    expected:
        Keywords: 'dog ; cat ; bird'

multi2multi:
    documentation:
        title: 'Multi-values metadata -> multi-values attribute ("metadata" method)'
    definitions:
        Keywords:
            isMultiple: true
            initialValues: '{"type": "metadata", "value": "IPTC:Keywords"}'
    metadata:
        'IPTC:Keywords': ['dog', 'cat', 'bird']
    expected:
        Keywords: ['dog', 'cat', 'bird']

multi2mono_template:
    documentation:
        title: 'Multi-values metadata -> multi-values attribute ("template" method)'
        description: '__warning__ : __Wrong__ usage of `getMetadata(...).value` (without "s")'
    definitions:
        Keywords:
            isMultiple: true
            initialValues: '{"type": "template", "value": "{{ file.getMetadata(''IPTC:Keywords'').value }}"}'
    metadata:
        'IPTC:Keywords': ['dog', 'cat', 'bird']
    expected:
        Keywords: 'dog ; cat ; bird'

multi2multi_template:
    documentation:
        title: 'Multi-values metadata -> multi-values attribute ("template" method)'
        description: 'Good usage of `getMetadata(...).values`'
    definitions:
        Keywords:
            isMultiple: true
            initialValues: '{"type": "template", "value": "{{ file.getMetadata(''IPTC:Keywords'').values | join(''\n'') }}"}'
    metadata:
        'IPTC:Keywords': ['dog', 'cat', 'bird']
    expected:
        Keywords: ['dog', 'cat', 'bird']

mono_multilingue:
    documentation:
        title: 'Mono-value multilocale'
    definitions:
        Copyright:
            initialValues:
                en: '{ "type": "template", "value": "(c) {{ file.getMetadata(''XMP-dc:Creator'').value }}. All rights reserved" }'
                fr: '{ "type": "template", "value": "(c) {{ file.getMetadata(''XMP-dc:Creator'').value }}. Tous droits réservés" }'
    metadata:
        'XMP-dc:Creator': 'Bob'
    expected:
        Copyright:
            en: '(c) Bob. All rights reserved'
            fr: '(c) Bob. Tous droits réservés'

multi_multilingue:
    documentation:
        title: 'Multi-values multilocale'
    definitions:
        Keywords:
            isMultiple: true
            initialValues:
                en: '{ "type": "metadata", "value": "XMP-dc:Subject" }'
                fr: '{ "type": "metadata", "value": "IPTC:SupplementalCategories" }'
    metadata:
        'XMP-dc:Subject': ['dog', 'cat', 'bird']
        'IPTC:SupplementalCategories': ['chien', 'chat', 'oiseau']
    expected:
        Keywords:
            en: ['dog', 'cat', 'bird']
            fr: ['chien', 'chat', 'oiseau']

unknown_tag:
    documentation:
        title: 'Unknown tag'
    definitions:
        zAttribute:
            initialValues: '{
               "type": "template",
               "value": "{{ (file.getMetadata(''badTag'').value ?? ''whaat ?'') }}"
            }'
    metadata: ~
    expected:
        zAttribute: 'whaat ?'

first_metadata:
    documentation:
        title: 'First metadata set, with alternate value (1)'
        description: 'for this test, only the metadata `IPTC:City` is set.'
    definitions:
        City:
            initialValues: '{
               "type": "template",
               "value": "{{ file.getMetadata(''XMP-iptcCore:CreatorCity'').value ?? file.getMetadata(''IPTC:City'').value ?? ''no-city ?'' }}"
            }'
    metadata:
        'IPTC:City': 'Paris'
    expected:
        City: 'Paris'

first_metadata_default:
    documentation:
        title: 'First metadata set, with alternate value (2)'
        description: 'for this test, no metadata is set, so the default value is used.'
    definitions:
        City:
            initialValues: '{
               "type": "template",
               "value": "{{ file.getMetadata(''XMP-iptcCore:CreatorCity'').value ?? file.getMetadata(''IPTC:City'').value ?? ''no-city ?'' }}"
            }'
    metadata: ~
    expected:
        City: 'no-city ?'

many_metadata_to_mono:
    documentation:
        title: 'Many metadata to a mono-value attribute'
        description: 'Here an array `[a, b]` is used, the `join` filter inserts a " - " only if required.'
    definitions:
        CreatorLocation:
            initialValues: '{
                "type": "template",
                "value": "{{ [file.getMetadata(''XMP-iptcCore:CreatorCity'').value, file.getMetadata(''XMP-iptcCore:CreatorCountry'').value] | join('' - '') }}"
            }'
    metadata:
        'XMP-iptcCore:CreatorCity': 'Paris'
        'XMP-iptcCore:CreatorCountry': 'France'
    expected:
        CreatorLocation: 'Paris - France'

many_metadata_to_multi:
    documentation:
        title: 'Many metadata to a multi-values attribute'
        description: "_nb_: We fill an array that will be joined by `\\n` to generate __one line per item__ (required).\n
                        \n
                        The `merge` filter __requires__ arrays, so `IPTC:Keywords` defaults to `[]` in case there is no keywords in metadata.\n"
    definitions:
        Keywords:
            isMultiple: true
            initialValues: '{
                "type": "template",
                "value": "{{ ( (file.getMetadata(''IPTC:Keywords'').values ?? []) | merge([file.getMetadata(''IPTC:City'').value, file.getMetadata(''XMP-photoshop:Country'').value ]) ) | join(''\n'') }}"
            }'
    metadata:
        'IPTC:Keywords': ['Eiffel Tower', 'Seine river']
        'IPTC:City': 'Paris'
        'XMP-photoshop:Country': 'France'
    expected:
        Keywords: ['Eiffel Tower', 'Seine river', 'Paris', 'France']

code_to_string:
    documentation:
        title: 'Transform code to human readable text'
        description: 'here the `ExposureProgram` metadata is a code (0...9), used to index an array of strings.'
    definitions:
        ExposureProgram:
            initialValues: '{
                "type": "template",
                "value": "{{ [
                                ''Not Defined'', ''Manual'', ''Program AE'',
                                ''Aperture-priority AE'', ''Shutter speed priority AE'',
                                ''Creative (Slow speed)'', ''Action (High speed)'', ''Portrait'',
                                ''Landscape'',  ''Bulb''
                             ][file.getMetadata(''ExifIFD:ExposureProgram'').value]
                            ?? ''Unknown mode''
                          }}"
            }'
    metadata:
        'ExifIFD:ExposureProgram': 2
    expected:
        ExposureProgram: 'Program AE'

code_to_string_2:
    definitions:
        ExposureProgram:
            initialValues: '{
                "type": "template",
                "value": "{{ [ ''a'', ''b'' ][file.getMetadata(''ExifIFD:ExposureProgram'').value] ?? ''z'' }}"
            }'
    metadata: ~
    expected:
        ExposureProgram: 'z'

