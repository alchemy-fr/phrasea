#!/usr/bin/env php
<?php

if ($argc === 1) {
    $projects = [getcwd()];
} else {
    $projects = array_values($argv);
    array_shift($projects);
    $projects = array_map('realpath', $projects);
}

function setupStreaming()
{
    ini_set('output_buffering', 'off');
    ini_set('zlib.output_compression', false);
    if (function_exists('apache_setenv')) {
        apache_setenv('no-gzip', '1');
        apache_setenv('dont-vary', '1');
    }
}

setupStreaming();

function runSubCommand($cmd)
{
    system($cmd, $return);
    if (0 !== $return) {
        throw new Exception(sprintf('Error %d: %s', $return, $cmd));
    }
}

function updateProject(string $project)
{
    echo sprintf("##########################\n## Optimize %s\n##########################\n\n", $project);

    $composerSrc = $project.'/composer.json';
    if (!file_exists($composerSrc)) {
        echo "WARNING: No composer.json file found.\n";
        return;
    }

    $composerJson = json_decode(file_get_contents($composerSrc), true, 512, JSON_THROW_ON_ERROR);

    $composerCacheSrc = $project . '/docker/caching/composer.json';
    $libPath = $project.'/../../lib';
    $libSymlink = $project.'/lib';
    if (is_dir($libPath)) {
        runSubCommand(sprintf('ln -s %s %s', $libPath, $libSymlink));
    } else {
        throw new InvalidArgumentException(sprintf('%s does not exist', $libPath));
    }

    $composerJson = flattenSubRequire($project, $composerJson);

    try {
        file_put_contents($composerCacheSrc, json_encode($composerJson, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES)."\n");

        echo sprintf("%s updated!\n", $composerCacheSrc);

        runSubCommand(sprintf(implode(' && ', [
            'set -x',
            'export COMPOSER_MEMORY_LIMIT=-1',
            '(cd %s',
            'rm -rf composer.lock vendor',
            'composer update --no-interaction --no-scripts --ansi --no-plugins',
            'rm -rf vendor)',
            '(cd %s && composer update --no-interaction --ansi)',
        ]), dirname($composerCacheSrc), $project));
    } finally {
        @unlink($libSymlink);
    }
}

function flattenSubRequire(string $workingDir, array $composer): array {
    $repositories = $composer['repositories'] ?? null;
    if ($repositories) {
        foreach ($repositories as $repository) {
            if ('path' === $repository['type']) {
                $url = $repository['url'];
                $path = $workingDir.'/'.preg_replace('#^\./#', '', $url);

                $subComposer = json_decode(file_get_contents($path.'/composer.json'), true, 512, JSON_THROW_ON_ERROR);

                unset($composer['require'][$subComposer['name']]);

                foreach ($subComposer['require'] as $lib => $version) {
                    if (str_contains($lib, '/')) {
                        $composer['require'][$lib] = $version;
                    }
                }
            }
        }
    }

    return $composer;
}

foreach ($projects as $project) {
    updateProject($project);
}

