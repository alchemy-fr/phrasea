#!/usr/bin/env php
<?php

if ($argc === 1) {
    $projects = [getcwd()];
} else {
    $projects = array_values($argv);
    array_shift($projects);
    $projects = array_map('realpath', $projects);
}

function setupStreaming()
{
    ini_set('output_buffering', 'off');
    ini_set('zlib.output_compression', false);
    if (function_exists('apache_setenv')) {
        apache_setenv('no-gzip', '1');
        apache_setenv('dont-vary', '1');
    }
}

setupStreaming();

function runSubCommand($cmd)
{
    system($cmd, $return);
    if (0 !== $return) {
        throw new Exception(sprintf('Error %d: %s', $return, $cmd));
    }
}

function updateProject(string $project)
{
    echo sprintf("##########################\n## Optimize %s\n##########################\n\n", $project);

    $composerSrc = $project.'/composer.json';
    if (!file_exists($composerSrc)) {
        echo "WARNING: No composer.json file found.\n";
        return;
    }

    $composerJson = json_decode(file_get_contents($composerSrc), true);

    $composerCacheSrc = $project . '/docker/caching/composer.json';
    if (is_dir($project.'/__lib')) {
        runSubCommand(sprintf('cp -r %s/__lib %s/', $project, dirname($composerCacheSrc)));
    } else {
        throw new InvalidArgumentException(sprintf('%s does not exist', $project.'/__lib'));
    }

    try {
        file_put_contents($composerCacheSrc, json_encode($composerJson, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES)."\n");

        echo sprintf("%s updated!\n", $composerCacheSrc);

        runSubCommand(sprintf(implode(' && ', [
            'set -x',
            'export COMPOSER_MEMORY_LIMIT=-1',
            '(cd %s',
            'rm -rf composer.lock vendor',
            'composer update --no-interaction --no-scripts --ansi --no-plugins',
            'rm -rf vendor)',
            '(cd %s && composer update --no-interaction --ansi)',
        ]), dirname($composerCacheSrc), $project));

        clearLocalLibs(dirname($composerCacheSrc));
    } finally {
        runSubCommand(sprintf('rm -rf %s/__lib', dirname($composerCacheSrc)));
    }
}

function clearLocalLibs(string $dir) {
    $lockFile = $dir.'/composer.lock';
    $c = json_decode(file_get_contents($lockFile), true);
    $packages = $c['packages'];
    foreach ($packages as $key => $package) {
        $type = $package['dist']['type'] ?? null;
        if ($type === 'path') {
            unset($packages[$key]);
        }
    }
    $packages = array_values($packages);
    $c['packages'] = $packages;

    file_put_contents($lockFile, json_encode($c, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES)."\n");
}

foreach ($projects as $project) {
    updateProject($project);
}

